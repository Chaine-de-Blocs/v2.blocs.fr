[{"content":"Lecture du chapitre 1 de Mastering the Lightning Network   Bienvenue dans Mastering the Lightning Network !\nLe Lightning Network (souvent abrégé en LN) change la façon dont les gens échangent de la valeur en ligne, et c\u0026rsquo;est l\u0026rsquo;une des avancées les plus excitantes de l\u0026rsquo;histoire de Bitcoin. Le Lightning Network en est encore à ses balbutiements. Le Lightning Network est un protocole permettant d\u0026rsquo;utiliser Bitcoin de manière intelligente. Il s\u0026rsquo;agit d\u0026rsquo;une technologie de deuxième couche sur Bitcoin.\nLe concept du Lightning Network a été proposé en 2015, et la première implémentation a été lancée en 2018. À partir de 2021, nous commençons seulement à voir les opportunités que le Lightning Network offre à Bitcoin, y compris l\u0026rsquo;amélioration de la confidentialité, de la vitesse et de l\u0026rsquo;échelle. Avec une connaissance de base du Lightning Network, vous pouvez aider à façonner l\u0026rsquo;avenir du réseau tout en créant des opportunités pour vous-même.\nIl est supposé que vous avez déjà quelques connaissances de base sur Bitcoin, mais si ce n\u0026rsquo;est pas le cas, ne vous inquiétez pas, les concepts Bitcoin les plus importants sont expliqués. Si vous voulez en savoir plus sur Bitcoin, vous pouvez lire Mastering Bitcoin, 2e édition, par Andreas M. Antonopoulos (O\u0026rsquo;Reilly), disponible gratuitement en ligne.\nAlors que la majeure partie de ce livre est écrite pour les programmeurs, les premiers chapitres sont écrits pour être accessibles à tous, quelle que soit leur expérience technique. Dans ce chapitre, nous commencerons par un peu de terminologie, puis nous examinerons la confiance et son application dans ces systèmes, et enfin nous discuterons de l\u0026rsquo;histoire et de l\u0026rsquo;avenir du Lightning Network.\n","description":"Introduction à Lightning Network et Bitcoin. Comment le protocole intègre un protocole d'équilibre permettant à des acteurs du réseau Lightning Network de se faire confiance.","id":0,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"1 - Mastering the Lightning Network - Comprendre Bitcoin et le Lightning Network","uri":"https://blocs.fr/blog/mastering-the-lightning-network-1/"},{"content":"Lecture des chapitre 13 et 14 de Mastering the Lightning Network   Wire Protocol Dans ce chapitre, nous plongeons dans le protocole filaire du Lightning Network et couvrons également tous les différents leviers d\u0026rsquo;extensibilité qui ont été intégrés au protocole. À la fin de ce chapitre, un lecteur ambitieux devrait être capable d\u0026rsquo;écrire son propre analyseur de protocole filaire pour le Lightning Network. En plus d\u0026rsquo;être capable d\u0026rsquo;écrire un analyseur de protocole filaire personnalisé, un lecteur de ce chapitre acquerra une compréhension approfondie des divers mécanismes de mise à niveau qui ont été intégrés au protocole.\nChiffrement bout à bout Dans ce chapitre, nous examinerons le transport de messages cryptés du Lightning Network, parfois appelé protocole Brontide, qui permet aux pairs d\u0026rsquo;établir une communication cryptée de bout en bout, une authentification et une vérification de l\u0026rsquo;intégrité.\n Une partie de ce chapitre comprend des détails hautement techniques sur le protocole de chiffrement et les algorithmes de chiffrement utilisés dans le transport chiffré Lightning. Vous pouvez décider de sauter cette section si vous n\u0026rsquo;êtes pas intéressé par ces détails.\n ","description":"On lit le livre Mastering the Lightning Network (LN) en Direct ! Chapitre 13 - Wire Protocol; Chapitre 14 - Chiffrement bout à bout","id":1,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"10 - Mastering the Lightning Network - Les messages sur Lightning Network (TLV, e2e encryption)","uri":"https://blocs.fr/blog/mastering-the-lightning-network-10/"},{"content":"Lecture des chapitre 15 et 16 de Mastering the Lightning Network   Requête de paiement Dans ce chapitre, nous examinerons les demandes de paiement Lightning, ou, comme on les appelle plus communément, les factures Lightning.\nVie privée avec LN Dans ce chapitre, nous examinons certains des problèmes les plus importants liés à la sécurité et à la confidentialité du Lightning Network. Tout d\u0026rsquo;abord, nous examinerons la confidentialité, ce que cela signifie, comment l\u0026rsquo;évaluer et certaines choses que vous pouvez faire pour protéger votre propre confidentialité lorsque vous utilisez le Lightning Network. Ensuite, nous explorerons certaines attaques courantes et techniques d\u0026rsquo;atténuation.\n","description":"On lit le livre Mastering the Lightning Network (LN) en Direct ! Chapitre 15 - Requête de paiement; Chapitre 16 - Vie privée avec LN","id":2,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"11 - Mastering the Lightning Network - Informations Paiement et vie privée en vidéo","uri":"https://blocs.fr/blog/mastering-the-lightning-network-11/"},{"content":"Chapitre final de Mastering the Lightning Network en vidéo   En quelques années seulement, le Lightning Network est passé d\u0026rsquo;un livre blanc à un réseau mondial en pleine croissance. En tant que deuxième couche de Bitcoin, il a tenu sa promesse de paiements rapides, peu coûteux et privés. De plus, il a déclenché un tsunami d\u0026rsquo;innovation, car il libère les développeurs des contraintes de consensus qui existent dans le développement de Bitcoin.\nL\u0026rsquo;innovation dans le Lightning Network se produit à plusieurs niveaux :\n Au niveau du protocole principal de Bitcoin, fournir l\u0026rsquo;utilisation et la demande de nouveaux opcodes Bitcoin Script, d\u0026rsquo;algorithmes de signature et d\u0026rsquo;optimisations Au niveau du protocole Lightning, avec de nouvelles fonctionnalités déployées rapidement sur l\u0026rsquo;ensemble du réseau Au niveau du canal de paiement, avec de nouvelles constructions de canaux et des améliorations En tant que fonctionnalités opt-in distinctes déployées de bout en bout par des implémentations indépendantes que les expéditeurs et les destinataires peuvent utiliser s\u0026rsquo;ils le souhaitent Avec de nouvelles et passionnantes applications Lightning (LApps) construites au-dessus des clients et des protocoles  Voyons comment ces innovations changent Lightning maintenant et dans un avenir proche.\n","description":"Fin du livre et setup d'un serveur Bitcon et Lightning Network avec getumbrel","id":3,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"12 - Mastering the Lightning Network - Chapitre final en vidéo","uri":"https://blocs.fr/blog/mastering-the-lightning-network-12/"},{"content":"Lecture du chapitre 2 de Mastering the Lightning Network   Dans ce chapitre, nous commencerons là où la plupart des gens commencent lorsqu\u0026rsquo;ils rencontrent le Lightning Network pour la première fois : choisir un logiciel pour participer à l\u0026rsquo;économie LN. Nous examinerons les choix de deux utilisateurs qui représentent un cas d\u0026rsquo;utilisation courant pour le Lightning Network et apprendrons par l\u0026rsquo;exemple. Alice, cliente d\u0026rsquo;un café, utilisera un portefeuille Lightning sur son appareil mobile pour acheter du café au Bob\u0026rsquo;s Cafe. Bob, un commerçant, utilisera un nœud Lightning et un portefeuille pour exécuter un système de point de vente dans son café, afin qu\u0026rsquo;il puisse accepter les paiements sur le Lightning Network.\n","description":"On lit le livre Mastering the Lightning Network (LN) en Direct ! Chapitre 2 - Le commencement","id":4,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"2 - Mastering the Lightning Network - Paiement avec Bitcoin et Lightning Network","uri":"https://blocs.fr/blog/mastering-the-lightning-network-2/"},{"content":"Lecture du chapitre 3 de Mastering the Lightning Network   Maintenant que nous avons suivi Alice alors qu\u0026rsquo;elle installait un portefeuille Lightning et achetait un café à Bob, nous allons regarder sous le capot et déballer les différents composants du Lightning Network impliqués dans ce processus. Ce chapitre donnera une vue d\u0026rsquo;ensemble de haut niveau et n\u0026rsquo;abordera pas tous les détails techniques. Le but est plutôt de vous aider à prendre conscience des concepts et briques de base les plus importants du Lightning Network.\nSi vous avez de l\u0026rsquo;expérience en informatique, en cryptographie, en Bitcoin et en développement de protocoles, ce chapitre devrait vous suffire pour pouvoir remplir vous-même les détails de connexion. Si vous êtes moins expérimenté, ce chapitre vous donnera une vue d\u0026rsquo;ensemble suffisante pour que vous compreniez plus facilement les spécifications formelles du protocole, connues sous le nom de BOLT (Basis of Lightning Technology). Si vous êtes débutant, ce chapitre vous aidera à mieux comprendre les chapitres techniques du livre.\nNous commencerons par une définition en une phrase de ce qu\u0026rsquo;est le Lightning Network et nous le détaillerons dans le reste de ce chapitre.\nLe Lightning Network est un réseau peer-to-peer de canaux de paiement mis en œuvre sous forme de contrats intelligents sur la blockchain Bitcoin ainsi qu\u0026rsquo;un protocole de communication qui définit la manière dont les participants configurent et exécutent ces contrats intelligents.\n","description":"On lit le livre Mastering the Lightning Network (LN) en Direct ! Chapitre 3 - Comment le Lightning Network fonctionne","id":5,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"3 - Mastering the Lightning Network - Transaction d'engagement (commitment tx)","uri":"https://blocs.fr/blog/mastering-the-lightning-network-3/"},{"content":"Lecture du chapitre 4 de Mastering the Lightning Network   Comme nous l\u0026rsquo;avons vu dans les chapitres précédents, un nœud Lightning est un système informatique qui participe au Lightning Network. Le Lightning Network n\u0026rsquo;est pas un produit ou une entreprise ; il s\u0026rsquo;agit d\u0026rsquo;un ensemble de normes ouvertes qui définissent une base d\u0026rsquo;interopérabilité. En tant que tel, le logiciel de nœud Lightning a été créé par diverses entreprises et groupes communautaires. La grande majorité des logiciels Lightning sont open source, ce qui signifie que le code source est ouvert et sous licence de manière à permettre la collaboration, le partage et la participation de la communauté au processus de développement. De même, les implémentations de nœuds Lightning que nous présenterons dans ce chapitre sont toutes open source et sont développées en collaboration.\nContrairement à Bitcoin, où la norme est définie par une implémentation de référence dans un logiciel (Bitcoin Core), dans Lightning, la norme est définie par une série de documents de normes appelés Basis of Lightning Technology (BOLT), trouvés dans le référentiel lightning-rfc.\nIl n\u0026rsquo;y a pas d\u0026rsquo;implémentation de référence du Lightning Network, mais il existe plusieurs implémentations concurrentes, compatibles BOLT et interopérables développées par différentes équipes et organisations. Les équipes qui développent des logiciels pour le Lightning Network contribuent également au développement et à l\u0026rsquo;évolution des normes BOLT.\nUne autre différence majeure entre le logiciel de nœud Lightning et le logiciel de nœud Bitcoin est que les nœuds Lightning n\u0026rsquo;ont pas besoin de fonctionner en parallèle avec des règles de consensus et peuvent avoir des fonctionnalités étendues au-delà de la ligne de base des BOLT. Par conséquent, différentes équipes peuvent poursuivre diverses fonctionnalités expérimentales qui, si elles réussissent et sont largement déployées, peuvent faire partie des BOLT plus tard.\nDans ce chapitre, vous apprendrez à configurer chacun des packages logiciels pour les implémentations de nœuds Lightning les plus courantes. Nous les avons présentés par ordre alphabétique pour souligner que nous ne préférons ou n\u0026rsquo;approuvons généralement pas l\u0026rsquo;un par rapport à l\u0026rsquo;autre. Chacun a ses forces et ses faiblesses, et le choix dépendra de divers facteurs. Puisqu\u0026rsquo;ils sont développés dans différents langages de programmation (par exemple, Go, C, etc.), votre choix peut également dépendre de votre niveau de familiarité et d\u0026rsquo;expertise avec un langage spécifique et un ensemble d\u0026rsquo;outils de développement.\n","description":"On lit le livre Mastering the Lightning Network (LN) en Direct ! Chapitre 4 - Les clients Lightning Network","id":6,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"4 - Mastering the Lightning Network - Créer un réseau de nœud Lightning Network","uri":"https://blocs.fr/blog/mastering-the-lightning-network-4/"},{"content":"Lecture du chapitre 5 de Mastering the Lightning Network   Après avoir lu jusqu\u0026rsquo;ici, vous avez probablement configuré un portefeuille Lightning. Dans ce chapitre, nous allons aller plus loin et configurer un nœud Lightning complet. En plus d\u0026rsquo;en installer un, nous apprendrons à le faire fonctionner et à l\u0026rsquo;entretenir dans le temps.\nIl existe de nombreuses raisons pour lesquelles vous pourriez vouloir configurer votre propre nœud Lightning. Ils incluent:\n Être un participant actif à part entière du Lightning Network, et pas seulement un utilisateur final Pour gérer une boutique en ligne ou recevoir des revenus via les paiements Lightning Pour gagner des revenus grâce aux frais de routage Lightning ou en louant la liquidité du canal Pour développer de nouveaux services, applications ou plug-ins pour le Lightning Network Pour augmenter votre confidentialité financière tout en utilisant Lightning Pour utiliser certaines applications conçues sur Lightning, telles que les applications de messagerie instantanée alimentées par Lightning Pour la liberté financière, l\u0026rsquo;indépendance et la souveraineté  Il y a des coûts associés à l\u0026rsquo;exécution d\u0026rsquo;un nœud LN. Vous avez besoin d\u0026rsquo;un ordinateur, d\u0026rsquo;une connexion Internet permanente, de beaucoup d\u0026rsquo;espace disque et de beaucoup de temps ! Les coûts d\u0026rsquo;exploitation comprendront les dépenses d\u0026rsquo;électricité.\nMais les compétences que vous apprendrez de cette expérience sont précieuses et peuvent également être appliquées à une variété d\u0026rsquo;autres tâches.\n","description":"On lit le livre Mastering the Lightning Network (LN) en Direct ! Chapitre 5 - Opérer un serveur Lightning Network","id":7,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"5 - Mastering the Lightning Network - Installer un serveur Bitcoin et LN","uri":"https://blocs.fr/blog/mastering-the-lightning-network-5/"},{"content":"Lecture des chapitres 6 et 7 de Mastering the Lightning Network   Dans ce chapitre, nous allons plonger dans les canaux de paiement et voir comment ils sont construits. Nous commencerons par le nœud d\u0026rsquo;Alice ouvrant un canal vers le nœud de Bob, en nous appuyant sur les exemples présentés au début de ce livre.\nLes messages échangés par les nœuds d\u0026rsquo;Alice et de Bob sont définis dans \u0026ldquo;BOLT #2 : Peer Protocol for Channel Management\u0026rdquo;. Les transactions créées par les nœuds d\u0026rsquo;Alice et de Bob sont définies dans \u0026ldquo;BOLT #3 : Bitcoin Transaction and Script Formats\u0026rdquo;. Dans ce chapitre, nous nous concentrons sur les parties \u0026ldquo;Channel open and close\u0026rdquo; et \u0026ldquo;Channel state machine\u0026rdquo; de l\u0026rsquo;architecture du protocole Lightning, mises en évidence par un aperçu au centre (couche peer-to-peer) des canaux de paiement dans la suite de protocoles Lightning .\n","description":"On lit le livre Mastering the Lightning Network (LN) en Direct ! Chapitre 6 - Architecture Lightning Network; Chapitre 7 - Les canaux de paiement","id":8,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"6 - Mastering the Lightning Network - Comprendre la commitment transaction","uri":"https://blocs.fr/blog/mastering-the-lightning-network-6/"},{"content":"Lecture du Chapitre 8 de Mastering the Lightning Network   Dans ce chapitre, nous verrons enfin comment les canaux de paiement peuvent être connectés pour former un réseau de canaux de paiement via un processus appelé routage. Plus précisément, nous nous intéresserons à la première partie de la couche de routage, le protocole \u0026ldquo;Atomic and trustless multihop contracts\u0026rdquo;. Ceci est mis en évidence par un aperçu dans la suite de protocoles, illustré dans Routage de paiement Atomic dans la suite de protocoles Lightning.\n","description":"On lit le livre Mastering the Lightning Network (LN) en Direct ! Chapitre 8 - Routage dans le canaux de paiment","id":9,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"7 - Mastering the Lightning Network - Routage, secret de paiement et HTLC sur LN","uri":"https://blocs.fr/blog/mastering-the-lightning-network-7/"},{"content":"Lecture des chapitre 10, 11 et 12 de Mastering the Lightning Network   Routage en oignon Dans ce chapitre, nous décrirons le mécanisme de routage en oignon du Lightning Network. L\u0026rsquo;invention du routage en oignon précède le Lightning Network de 25 ans ! Le routage en oignon a été inventé par des chercheurs de la marine américaine en tant que protocole de sécurité des communications. Le routage en oignon est le plus célèbre utilisé par Tor, la superposition Internet routée en oignon qui permet aux chercheurs, aux militants, aux agents de renseignement et à tout le monde d\u0026rsquo;utiliser Internet de manière privée et anonyme.\nDans ce chapitre, nous nous intéressons à la partie \u0026ldquo;Source-based onion routing (SPHINX)\u0026rdquo; de l\u0026rsquo;architecture du protocole Lightning, mise en évidence par un aperçu au centre (couche de routage) du routage Onion dans la suite de protocoles Lightning.\nProtocole de Gossip Dans ce chapitre, nous décrirons le protocole de potins du Lightning Network et comment il est utilisé par les nœuds pour construire et maintenir un graphe de canal. Nous passerons également en revue le mécanisme d\u0026rsquo;amorçage DNS utilisé pour trouver des pairs avec lesquels \u0026ldquo;commérer\u0026rdquo;.\nLa section \u0026ldquo;Frais de routage et relais Gossip\u0026rdquo; est mise en évidence par un aperçu couvrant la couche de routage et la couche peer-to-peer du protocole Gossip dans la suite de protocoles Lightning.\nPath Finding La livraison des paiements sur le Lightning Network dépend de la recherche d\u0026rsquo;un chemin de l\u0026rsquo;expéditeur au destinataire, un processus appelé recherche de chemin. Étant donné que le routage est effectué par l\u0026rsquo;expéditeur, l\u0026rsquo;expéditeur doit trouver un chemin approprié pour atteindre la destination. Ce chemin est ensuite encodé dans un oignon.\nDans ce chapitre, nous examinerons le problème de la recherche de chemin, comprendrons comment l\u0026rsquo;incertitude sur les équilibres des canaux complique ce problème et examinerons comment une implémentation typique de la recherche de chemin tente de le résoudre.\n","description":"On lit le livre Mastering the Lightning Network (LN) en Direct ! Chapitre 10 - Routage en oignon; Chapitre 11 - Protocole de Gossip; Chapitre 12 - Path Finding","id":10,"section":"blog","tags":["bitcoin","lightning network","mastering the lightning network","live"],"title":"9 - Mastering the Lightning Network - Onion routing, Gossip protocol et Path Finding","uri":"https://blocs.fr/blog/mastering-the-lightning-network-9/"},{"content":"Matériels requis Avant tout il va vous falloir du matériel puisqu\u0026rsquo;un nœud est un serveur qui fourni un service. Ne vous inquiétez pas vous n\u0026rsquo;aurez pas besoin d\u0026rsquo;un serveur coûteux, bruyant et consommateur. Vous aurez besoin d\u0026rsquo;un nano-ordinateur, c\u0026rsquo;est petit, c\u0026rsquo;est silencieux et la consommation est basse, voilà la liste :\n Raspberry Pi 3 : ce matériel est peu coûteux et a les capacités optimales pour avoir un nœud LN efficace. Veillez à acquérir un pack contenant le Raspberry Pi, l\u0026rsquo;alimentation secteur et une carte SSD. Ces éléments sont compris dans le pack officiel ; Un disque dur SSD de 500go ou plus : vous devrez télécharger la blockchain de Bitcoin qui fait plus de 200 giga octects. Je recommande un disque dur SSD (électronique) à préférer au disque dur mécanique qui a une moins bonne tolérance à la panne. J\u0026rsquo;ai personnellement un disque dur mécanique ; Un écran port HDMI : ce sera nécessaire pour faire les premières configurations ; Un clavier USB : ce sera également nécessaire pour faire les premières configurations ; Un câble RJ45 : ce sera pour connecter votre Raspberry Pi à Internet. Il est possible d\u0026rsquo;avoir une connexion wifi en y connectant une antenne ou un dongle. Cependant je déconseille cette approche pour des raisons de sécurité et également pour éviter les contraintes d\u0026rsquo;installation de drivers pas toujours disponibles sur les distributions Linux ;  Installer Raspian Stretch Lite Cette étape est optionnelle mais recommandée.\nAvant d\u0026rsquo;entamer la configuration de votre Raspberry installez un nouveau système d\u0026rsquo;exploitation plus léger que celui installé par défaut : c\u0026rsquo;est Raspian Stretch Lite.\n Stretch Lite est un système d\u0026rsquo;exploitation dans le but d\u0026rsquo;optimiser la consommation de ressources sur notre système.\n Installez Raspian Stretch Lite sur la carte SD fournie avec le Raspberry Pi. Il vous faudra la formater. Avec Windows le logiciel Etcher est d\u0026rsquo;une grande aide. Sur Mac et distributions Linux préférez la ligne de commande.\nConfigurer le Raspberry Pi Ici je vais considérer que vous êtes sur Raspian Stretch Lite, mais pas d\u0026rsquo;inquiétude vous pouvez tout suivre avec le système d\u0026rsquo;origine, veillez à ouvrir le terminal car nous allons travailler en ligne de commande, rien de mieux pour se familiariser avec l\u0026rsquo;environnement Linux.\nLes accès par défaut sont les suivants\n1 2  raspberry login: pi Password: raspberry    Si vous n\u0026rsquo;êtes pas habitué au terminal Debian, en tapant votre mot de passe rien ne s\u0026rsquo;affiche, c\u0026rsquo;est tout à faire normal, ce que vous tapez est quand même pris en compte. C\u0026rsquo;est une protection au même titre que les étoiles qu\u0026rsquo;on voit sur les formulaires web.\n Activer et configurer SSH Actuellement vous travaillez avec un écran et un clavier branchés sur votre petit Rapsberry\u0026hellip; Et c\u0026rsquo;est peut-être pas pratique. J\u0026rsquo;ai une bonne nouvelle, on va pouvoir faire en sorte de gérer votre système sans avoir besoin d\u0026rsquo;y accéder physiquement. Vous allez le contrôler à distance grâce au protocole SSH !\n SSH signifie Secure Shell, c\u0026rsquo;est un protocole de réseau ingénieux qui permet l\u0026rsquo;exécution de commandes à distance en bénéficiant de canaux cryptés. Il est possible d\u0026rsquo;utiliser SSH au sein d\u0026rsquo;un réseau local mais aussi en passant par Internet par exemple. Sachez que par défaut la configuration du SSH dans Raspian permet l\u0026rsquo;authentification par login et mot de passe.\n Par défaut la connexion SSH est désactivée pour des raisons de sécurité, alors activez le en tapant ce qui suit\n1  pi@raspberrypi:~ $ sudo raspi-config   Un menu graphique peu charmant s\u0026rsquo;ouvre, sélectionnez Interfacing Options (Configure connections to peripherals) puis ssh (Enable or disable ssh server) ensuite sélectionnez Yes, OK et enfin Finish.\nRevenez sur le terminal et redémarrez le service ssh\n1  pi@raspberrypi:~ $ sudo systemctl restart ssh   Votre SSH est maintenant activé.\nÀ la bonheur, vous pouvez dès maintenant vous connecter à votre Raspberry à distance, depuis un autre ordinateur. D\u0026rsquo;abord récupérez l\u0026rsquo;adresse IP de votre Raspberry vous en aurez besoin, utilisez la commande ifconfig pour l\u0026rsquo;afficher. Voilà un extrait de mon ifconfig\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  pi@raspberrypi:~ $ ifconfig eth0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt;; mtu 1500 inet 192.168.1.4 netmask 255.255.255.0 broadcast 192.168.1.255 inet6 fe80::10e0:8a76:4fe4:c3c2 prefixlen 64 scopeid 0x20 ether b8:27:eb:6a:3a:d9 txqueuelen 1000 (Ethernet) RX packets 169483183 bytes 168117311599 (156.5 GiB) RX errors 2 dropped 45841 overruns 0 frame 0 TX packets 132373249 bytes 17426498366 (16.2 GiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt;; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10 loop txqueuelen 1000 (Local Loopback) RX packets 39066126 bytes 154986068081 (144.3 GiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 39066126 bytes 154986068081 (144.3 GiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 wlan0: flags=4099\u0026lt;UP,BROADCAST,MULTICAST\u0026gt;; mtu 1500 ether b8:27:eb:3f:6f:8c txqueuelen 1000 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0   Voyez en surligné mon adresse IP est 192.168.1.42 — puisque c\u0026rsquo;est la réponse à tous les mystères de l\u0026rsquo;univers. Vous la trouverez normalement sur le connecteur eth0 et en ipv4 qui est le format que j\u0026rsquo;ai sélectionné et que je vous recommande pour éviter des configurations futures.\nAvec votre ordinateur favori, que ce soit sur MacOS, Windows, Ubuntu, Trisquel ou TempleOS vous pouvez utiliser un outil qui permet de vous connecter à votre Raspberry avec SSH. Le plus simple avec MacOS ou une distribution Linux. Si vous n\u0026rsquo;avez pas ssh de disponible en commande, veuillez installer OpenSSH. Voilà comment procéder avec votre terminal sachant que mon IP est 192.168.1.42\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  monpc@oumonmac:~ $ ssh-keygen -t rsa -b 4096 \u0026gt;; Generating public/private rsa key pair. \u0026gt;; Enter a file in which to save the key (/home/you/.ssh/id_rsa): [Press enter] Laissez par défaut \u0026gt;; Enter passphrase (empty for no passphrase): [Type a passphrase] Votre mot de passe \u0026gt;; Enter same passphrase again: [Type passphrase again] Confirmez votre mot de passe monpc@oumonmac:~ $ ssh pi@192.168.1.42 pi@192.168.1.42\u0026#39;s password: Entrez votre mot de passe Linux raspberrypi 4.14.71-v7+ #1145 SMP Fri Sep 21 15:38:35 BST 2018 armv7l The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/* /copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Tue Mar 19 02:04:32 2019 from 192.168.1.44 pi@raspberrypi:~ \u0026amp;   Cette étape permet d\u0026rsquo;avoir une clé RSA pour initialiser une communication chiffrée avec votre Raspberry et de connecter ensuite.\nIl existe des solutions avec interface comme PuTTY pour Windows. Vous devrez entrer l\u0026rsquo;adresse IP de votre Raspberry, le login pi et le mot de passe raspberry.\nCréer un utilisateur Afin de protéger votre installation du mieux que possible je recommande de créer un utilisateur prévu à cet usage. Nous l\u0026rsquo;appellerons \u0026ldquo;bitcoin\u0026rdquo;.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  pi@raspberrypi:~ $ adduser bitcoin Adding user \u0026#39;bitcoin\u0026#39; ... Adding new group \u0026#39;bitcoin\u0026#39; (1001) ... Adding new user \u0026#39;bitcoin\u0026#39; (1001) with group \u0026#39;bitcoin\u0026#39; ... Creating home directory \u0026#39;/home/bitcoin\u0026#39; ... Copying files from \u0026#39;/etc/skel\u0026#39; ... Enter new UNIX password: Mettez un mot de passe fort Retype new UNIX password: Confirmez votre mot de passe passwd: password updated successfully Changing the user information for bitcoin Enter the new value, or press ENTER for the default \u0026amp;nbsp;\u0026amp;nbsp;Full Name []: Vous pouvez laisser tous ces champs vides \u0026amp;nbsp;\u0026amp;nbsp;Room Number []: \u0026amp;nbsp;\u0026amp;nbsp;Work Phone []: \u0026amp;nbsp;\u0026amp;nbsp;Home Phone []: \u0026amp;nbsp;\u0026amp;nbsp;Other []: Is the information correct? [Y/n] Y    Vous pouvez désormais vous connecter directement à l\u0026rsquo;utilisateur \u0026ldquo;bitcoin\u0026rdquo; avec SSH en tapant par exemple ssh bitcoin@192.168.1.42\n Préparer le disque dur Vous aurez besoin de télécharger l\u0026rsquo;entièreté de la blockchain Bitcoin qui fait 250go à l\u0026rsquo;heure où j\u0026rsquo;écris ces lignes. Cela signifie que la petite carte SD du Raspberry ne peut pas mémoriser tout ça. On va faire en sorte que toutes les informations relatives à la blockchain résident dans le disque externe.\nUne fois que vous avez branché votre disque dur sur votre Raspberry, vous devriez le retrouver en tapant la commande df -h. Cette commande va vous lister quelque chose qui ressemble à ce qui suit :\n1 2 3 4 5 6 7 8 9  pi@raspberrypi:~ $ df -h /dev/root 15G 4.2G 9.8G 30% devtmpfs 460M 0 460M 0% /dev tmpfs 464M 0 464M 0% /dev/shm tmpfs 464M 6.2M 458M 2% /run tmpfs 5.0M 4.0K 5.0M 1% /run/lock tmpfs 464M 0 464M 0% /sys/fs/cgroup /dev/mmcblk0p1 44M 22M 22M 51% /boot Highlight\u0026gt;/dev/sda 458G 249G 186G 58% /home/bitcoin/.bitcoi\u0026lt;/ Highlight \u0026gt;tmpfs 93M 0 93M 0% /run/user/1001   Vous devrez trouver un élément ayant la même capacité de stockage que votre disque. Mon disque fait 500go et on le trouve sur le chemin /dev/sda. En général on le devine dans la mesure où c\u0026rsquo;est le seul disque ayant cette capacité. Notez ce nom quelque part, et retenez cette commande df qui est pratique pour gérer ses disques.\nFormater (optionnel) Votre disque dur doit maintenant être vierge (à moins que vous y avez enregistré la blockchain, dans ce cas ignorez cette étape). Tapez la commande fdisk [votre disque] où [votre disque] devient le nom de votre disque, dans mon exemple c\u0026rsquo;est fdisk /dev/sda.\nMonter le disque Enfin il faut monter le disque sur le dossier de travail de Bitcoin, on va lui préparer sa maison et son nid douillet. Monter un disque signifie que nous allons associer un répertoire à un disque, octroyant une capacité de mémoire certaine à un répertoire. Et pour ce faire connectez vous à l\u0026rsquo;utilisateur que nous avions précédemment créé su bitcoin, puis tapez mkdir .bitcoin .lnd.\nIl ne vous reste plus qu\u0026rsquo;à taper mount \u0026lt;votre disque\u0026gt; .bitcoin où votre disque est le chemin trouvé avec df.\n mkdir signifie make directory, c\u0026rsquo;est pour créer un dossier et .bitcoin est le nom du dossier. Par défaut nous travaillerons avec ce dossier pour la blockchain et les portefeuilles. Le \u0026ldquo;.\u0026rdquo; est un moyen de cacher le dossier, cependant en aucun cas cela constitue sécurité suffisante.\n Installer bitcoind et bitcoin-cli Pour cette partie restez connecté à l\u0026rsquo;utilisateur bitcoin en tapant su bitcoin.\nbitcoind est le système central de Bitcoin, le \u0026ldquo;d\u0026rdquo; à la fin signifie \u0026ldquo;daemon\u0026rdquo; qui désigne un service exécuté et maintenu par la machine. bitcoin-cli est une interface de commande qui permet d’interagir avec le service Bitcoin. Les deux s\u0026rsquo;installent ensemble, ce qui est super !\nD\u0026rsquo;abord vous devrez chercher les fichiers d\u0026rsquo;installation de Bitcoin, je vous le donne ici : bitcoin-0.19.0.1-arm-linux-gnueabihf.tar.gz. Gardez ce lien vous en aurez besoin.\nJe tiens à souligner que vous pouvez le chercher par vous même en vous rendant ici et en sélectionnant \u0026ldquo;ARM Linux 64bits\u0026rdquo;. Je vous conseille de le faire vous même car les versions sont mises à jour, ci-dessus vous avez la version 0.19.0.1 de Bitcoin Core.\nSuivez les commandes ci-dessous pour installer bitcoind\n1 2 3 4  bitcoin@raspberrypi:~ $ wget https://bitcoin.org/bin/bitcoin-core-0.19.0.1/bitcoin-0.19.0.1-arm-linux-gnueabihf.tar.gz bitcoin@raspberrypi:~ $ tar -vxf bitcoin-0.19.0.1-arm-linux-gnueabihf.tar.gz bitcoin@raspberrypi:~ $ sudo install -m 0755 -o bitcoin -g bitcoin -t /usr/local/bin bitcoin-0.19.0.1/bin/* bitcoin@raspberrypi:~ $ rm -rf bitcoin-0.19.0.1   Notez qu\u0026rsquo;on donne les droits uniquement à l\u0026rsquo;utilisateur bitcoin. Désormais tapez les commandes bitcoind -version et bitcoin-cli -version. Si tout est bien installé vous verrez les versions s\u0026rsquo;afficher.\nDémarrer bitcoind bitcoind est installé, il reste plus qu\u0026rsquo;à le démarrer pour qu\u0026rsquo;il puisse télécharger frénétiquement la blockchain en se connectant à des nœuds du réseau; automatiquement.\nD\u0026rsquo;abord je vous recommande de vérifier si vous avez bien connecté votre disque dur, suivez l\u0026rsquo;exemple ci-dessous\n1 2 3 4 5 6  bitcoin@raspberrypi:~ $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT\u0026#34; sda 8:0 0 465.8G 0 disk /home/bitcoin/.bitcoin mmcblk0 179:0 0 14.9G 0 disk |-mmcblk0p1 179:1 0 43.8M 0 part /boot -mmcblk0p2 179:2 0 14.8G 0 part /   On peut voir en surligné que /home/bitcoin/.bitcoin est bien connecté au disque ayant 465.8Go d\u0026rsquo;espace. Si vous n\u0026rsquo;avez pas cela, revenez sur la partie Monter le disque.\nMaintenant on peut écrire le fichier de configuration Bitcoin. Tapez nano .bitcoin/bitcoin.conf, cela va vous ouvrir un éditeur directement dans le terminal, ce qui vous permet d\u0026rsquo;écrire les configurations. Voilà des configurations que je recommande :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  server=1 daemon=1 txindex=1 rpcuser=\u0026lt;Mettez un nom d\u0026#39;utilisateur\u0026gt; rpcpassword=\u0026lt;Mettez un mot de passe\u0026gt; onlynet=ipv4 zmqpubrawblock=tcp://127.0.0.1:28332 zmqpubrawtx=tcp://127.0.0.1:28333 dbcache=50 maxorphantx=10 maxmempool=50 maxconnections=40 maxuploadtarget=1000   Pour sauvegarder tapez CTRL + O et CTRL + X pour quitter.\nEt enfin tapez sudo bitcoind qui aura pour effet de lancer le service Bitcoin qui va rapidement commencer à télécharger la blockchain. Pour rappel cette dernière fait près de 200Go donc vous pouvez prendre une pause ici.\nPour observer l\u0026rsquo;avancement tapez la commande tail -f .bitcoin/debug.log vous verrez des entrées qui ressemblent à ce qui suit\n2019-04-15T22:54:29Z UpdateTip: new best=00000000000000000024f0048c611086130b387e6634d8e2617c261a0c44b6dd height=571800 version=0x20c00000 log2_work=90.545983 tx=402724776 date=\u0026#39;2019-04-15T22:54:19Z\u0026#39; progress=1.000000 cache=14.5MiB(103309txo) warning=\u0026#39;35 of last 100 blocks have unexpected version\u0026#39; L\u0026rsquo;information intéressante ici est particulièrement progress=1.000000. Cette valeur est en réalité la progression de la synchronisation de la blockchain, 1 signifie 100%, si vous avez par exemple progress=0.014 alors vous en êtes à 1.4%. Pour quitter le tail tapez CTRL + C.\nInstaller LND et LnCLI Pour cette partie restez connecté à l\u0026rsquo;utilisateur bitcoin en tapant su bitcoin.\nlnd est le service qui va transformer le RaspberryPi en un nœud Lightning Network. Il va se connecter automatiquement a l\u0026rsquo;interface de commande du service bitcoind. Tout comme bitcoind LND embarque l\u0026rsquo;interface de commande lncli.\nLa procédure pour installer LND ressemble à l\u0026rsquo;installation de Bitcoin. La première chose à faire est de télécharger le service en vous rendant sur ce lien github.com/lightningnetwork/lnd/releases. Ici vous trouverez toutes les versions officielles de LND. Récupérez maintenant le lien de la dernière version \u0026ldquo;linux-armv7\u0026rdquo;, voici celle que j\u0026rsquo;ai à l\u0026rsquo;heure où j\u0026rsquo;écris cet article lnd-linux-armv7-v0.8.2-beta.tar.gz.\nNotez bien que mon exemple s\u0026rsquo;applique pour la version que j\u0026rsquo;ai envoyée : v0.8.2beta.\n1 2 3 4  bitcoin@raspberrypi:~ $ wget https://github.com/lightningnetwork/lnd/releases/download/v0.8.2-beta/lnd-linux-armv7-v0.8.2-beta.tar.gz bitcoin@raspberrypi:~ $ tar -vxf lnd-linux-armv7-v0.8.2-beta.tar.gz bitcoin@raspberrypi:~ $ sudo install -m 0755 -o bitcoin -g bitcoin -t /user/local/bin lnd-linux-armv7-v0.8.2-beta/* bitcoin@raspberrypi:~ $ rm -rf lnd-linux-armv7-v0.8.2-beta   Désormais tapez la commande lnd -version. Si tout est bien installé vous verrez la version s\u0026rsquo;afficher.\nAvant de démarrer LND créez son fichier de configuration en tapant nano .lnd/lnd.conf. Trouvez ci-dessous une configuration que je propose, vous pouvez évidemment mettre ce que vous voulez pour certaines options.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  [Application Options] debuglevel=info maxpendingchannels=3 alias=\u0026lt;Votre Alias / pseudonyme / nom / ...\u0026gt; color=\u0026lt;Une couleur en hexadécimal, par exemple #F00 pour Rouge vif\u0026gt; nat=true # Si vous vous connectez depuis une box Internet [Bitcoin] bitcoin.active=1 bitcoin.mainnet=1 bitcoin.node=bitcoind [bitcoind] bitcoind.rpcuser=\u0026lt;Ce que vous aviez mis dans .bitcoin/bitcoin.conf rpcuser=\u0026gt; bitcoind.rpcpass=\u0026lt;Ce que vous aviez mis dans .bitcoin/bitcoin.conf rpcpassword=\u0026gt; bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 [autopilot] autopilot.active=1 autopilot.maxchannels=3 autopilot.allocation=0.5    \u0026ldquo;autopilot\u0026rdquo; vous intrigue peut-être. C\u0026rsquo;est un algorithme qui connecte automatiquement des nœuds présents dans le réseau décentralisé, typiquement des nœuds Bitcoin et Lightning Network. Autopilot intègre le modèle Barabási–Albert dans l\u0026rsquo;idée de produire un réseau pair-à-pair en théorie homogène. Personnellement je l\u0026rsquo;active mais en aucun cas cela est nécessaire.\n Démarrer LND Tapez simplement lnd et voilà ! Votre nœud LN est en route. Il va d\u0026rsquo;abord synchroniser sa blockchain locale avec bitcoind. En attendant vous allez créer votre portefeuille. En effet LND ne va pas exploiter le portefeuille de bitcoind mais gérer le sien, cela veut dire que vous aurez un portefeuille relatif à votre nœud LN.\nLaissez lnd tourner, ne quittez pas en faisant CTRL + C, je vous suggère d\u0026rsquo;ouvrir un nouveau terminal et vous connecter à nouveau sur bitcoin. Quitter votre terminal ne stoppera pas LND.\nUne fois de retour suivez cette procédure ci-dessous :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  bitcoin@raspberrypi:~ $ lncli create Input wallet password : \u0026lt;Mettez un mot de passe fort et écrivez le sur une feuille pour ne pas le perdre\u0026gt; Confirm wallet password: \u0026lt;Confirmez votre mot de passe\u0026gt; Do you have an existing cipher seed mnemonic you want to user? (Enter y/n): n Your cipher seed can optionally be encrypted. Input your passphrase if you wish to encrypt it (or press enter to proceed without a cipher seed passphrase): \u0026lt;Mettez un mot de passe ou pressez directement ENTREE\u0026gt; Generating fresh cipher seed... !!!YOU MUST WRITE DOWN THIS SEED TO BE ABLE TO RESTORE THE WALLET!!! \u0026gt; Ici lncli affiche votre seed, notez la consciencieusement sur une feuille, dans l\u0026#39;ordre. Cette seed (graine) est la clé de votre portefeuille; elle vous assurera de ne jamais perdre vos fonds !!!YOU MUST WRITE DOWN THIS SEED TO BE ABLE TO RESTORE THE WALLET!!! lnd successfully initialized!   TADAM ! Vous avez maintenant un tout nouveau portefeuille et LND sera capable de fonctionner\u0026hellip; Après avoir tapé ces commandes\n1 2  bitcoin@raspberrypi:~ $ lncli unlock bitcoin@raspberrypi:~ $ lncli newaddress p2wkh    \u0026ldquo;lncli unlock\u0026rdquo; est important pour que LND puisse fonctionner car il aura besoin d\u0026rsquo;un accès à votre portefeuille, ce dernier est chiffré par défaut et il faut le déchiffrer en le déverrouillant. Le mot de passe à insérer est le premier mot de passe que vous avez mis lors de la création du portefeuille avec lncli create\n LND est maintenant prêt à fonctionner. Pour observer ce qu\u0026rsquo;il se passe tapez la commande tail -f .lnd/debug.log.\nPour vérifier que votre nœud est bien recensé sur les internets allez chercher votre clé publique en tapant lncli getinfo comme dans le terminal ci-dessous\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  bitcoin@raspberrypi:~ $ lncli getinfo { \u0026#34;dentity_pubkey\u0026#34;: \u0026#34;03a2c34daf010b3501daf704b5a321e82e1631421b7ffa18dd49014967eda82dc\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;Blocs\u0026#34;, \u0026#34;num_pending_channels\u0026#34;: 0, \u0026#34;num_active_channels\u0026#34;: 3, \u0026#34;num_peers\u0026#34;: 4, \u0026#34;block_height\u0026#34;: 572660, \u0026#34;block_hash\u0026#34;: \u0026#34;0000000000000000001d7bf15a13ffb76a8c1256e5ab778ffcc918d97944e45a\u0026#34;, \u0026#34;synced_to_chain\u0026#34;: true, \u0026#34;testnet\u0026#34;: false, \u0026#34;chains\u0026#34;: [ \u0026#34;bitcoin\u0026#34; ], \u0026#34;uris\u0026#34;: [ \u0026#34;03a2c34daf010b3501daf704b5a321e82e1631421b7ffa18dd49014967eda82dc9@109.18.104.32:9735\u0026#34; ], \u0026#34;best_header_timestamp\u0026#34;: \u0026#34;1555878831\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.5.2-beta commit=v0.5.2-beta\u0026#34;, \u0026#34;num_inactive_channels\u0026#34;: 0\u0026#39; }   Ma clé publique est 03a2c34daf010b3501daf704b5a321e82e1631421b7ffa18dd49014967eda82dc9, elle sert d\u0026rsquo;identifiant au nœud. Maintenant si votre nœud est bien configuré et en route, vous pouvez le trouver sur ce site : 1ml.com en tapant dans la recherche la clé publique de votre nœud.\nVous êtes maintenant propriétaire d\u0026rsquo;un nœud Bitcoin et d\u0026rsquo;un nœud Lightning Network. Cela signifie que vous avez la capacité d\u0026rsquo;utiliser n\u0026rsquo;importe quel portefeuille supportant LN en passant par votre propre serveur. Félicitations et bienvenue dans la communauté de l\u0026rsquo;a\u0026hellip; Bitcoin et LN. Dans un article suivant on va voir comment avoir une interface graphique pour gérer son nœud sans passer par les lignes de commande comme nous l\u0026rsquo;avons fait tout au long de l\u0026rsquo;installation. Pour l\u0026rsquo;heure vous pouvez découvrir les possibilités de LN en tapant lncli --help et les possibilités de Bitcoin en tapant bitcoin-cli --help.\n","description":"Envoyer des microtransactions bitcoin n'était pas possible jusqu'à l'arrivée de la technologie Lightning Network. C'est un système qui permet de faire des transactions quasi-instantannées et avec peu de frais.","id":11,"section":"blog","tags":["bitcoin","lightning network","debian","bitcoin-cli"],"title":"Installer un nœud Lightning Network","uri":"https://blocs.fr/blog/installer-un-noeud-lightning-network/"},{"content":"Notez que tout ce qui va suivre devra se faire avec l\u0026rsquo;utilisateur administrateur. Pour s\u0026rsquo;y connecter tapez une fois su root puis tapez son mot de passe.\nFixer l\u0026rsquo;adresse IP locale du nœud Ce qui suit s\u0026rsquo;applique qu\u0026rsquo;aux connexions réseau filaire et non Wifi\nVotre nœud possède une adresse IP locale afin d\u0026rsquo;être accéssible dans votre réseau, c\u0026rsquo;est d\u0026rsquo;ailleurs grâce à cette dernière que vous pouvez y accéder avec SSH. Cependant il est fort probable que son adressage se fasse dynamiquement par défaut, par conséquent l\u0026rsquo;adresse de votre Raspberry pourrait changer. Il est préférable d\u0026rsquo;éviter cette inconvenance alors on va forcer une adresse IP statique.\nOuvrez le fichiers de configuration DHCP en tapant nano /etc/dhcpcd.conf, ajoutez à la fin du fichier ces informations :\ninterface eth0 static ip_address=192.168.1.42/24 # C\u0026#39;est l\u0026#39;IP qu\u0026#39;aura la machine static routers=\u0026lt;Votre passerelle\u0026gt; # Passerelle, explications plus bas static domain_name_servers=\u0026lt;Votre passerelle\u0026gt; 8.8.8.8 Ici vous allez devoir faire un travail d\u0026rsquo;enquête pour connaître votre réseau et savoir quelle est la passerelle. Suivez le terminal ci-dessous :\npi@raspberrypi:~ $ ip route default via 192.168.1.1 dev eth0 src 192.168.1.42 metric 202 192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.42 metric 202 Trouvé ! 192.168.1.1 est la passerelle de mon réseau, c\u0026rsquo;est ce que vous devez mettre dans la configuration DHCP plus haut. Notez également le /24 qui est un masque de réseau et que vous devez aussi utiliser dans votre configuration DHCP.\n Sans entrer dans les détails le masque /24 (ou /n) est ce qui va déterminer la plage d\u0026rsquo;adresses disponibles. Avec une adresse type 192.168.1.0/24 vous avez 254 adresses disponibles allant de 192.168.1.1 à 192.168.1.254. C\u0026rsquo;est important à considérer car cela signifie que vous ne pouvez pas mettre n\u0026rsquo;importe quelle adresse, il est important de respecter le format. Pour être sûr de ne pas vous tromper, conservez les 3 premiers chiffres de l\u0026rsquo;IP et choisissez le dernier : x.x.x.y où \u0026ldquo;x\u0026rdquo; sont les valeurs de base de l\u0026rsquo;IP (192.168.1 selon l\u0026rsquo;exemple) et \u0026ldquo;y\u0026rdquo; est une valeur choisie arbitrairement et comprise entre 1 et 254.\n Votre nœud a maintenant une IP statique.\nSécuriser les accès distants SSH SSH est un protocole de réseau qui vous permet de vous connecter à distance sur une machine grâce à un canal chiffré. Cela signifie que la machine distante exécute un service qui reçoit les connexions SSH, ce service s\u0026rsquo;appelle sshd. SSH en lui même est plutôt bien sécurisé, cependant il est possible de couvrir un peu mieux les accès.\nSans plus attendre trouvez le fichier en tapant sudo nano /etc/ssh/sshd_config.\nVoyons quelles modifications vous pouvez apporter afin de mieux sécuriser les accès SSH. Vous noterez que la plupart des lignes sont commentées grâce au caractère \u0026ldquo;#\u0026rdquo;, cela signifie juste que les lignes comportant ce symbole au début sont neutralisées, le travail consiste essentiellement à dé-neutraliser certaines lignes.\nPort 2310 : Mettez le port que vous souhaitez, le changer est toujours une couche de sécurité peu coûteuse. Ici j\u0026rsquo;ai mis 2310.\nLoginGraceTime 2m : Limite le temps de connexion inactif à 2 minutes. Vous pouvez l\u0026rsquo;augmenter mais le plus bas le mieux.\nStrictModes yes : Assure les accès aux fichiers en fonction de l\u0026rsquo;utilisateur connecté.\nPermitRootLogin no : Mettez PermitRootLogin à no, cette option bloquera les connexions SSH à l\u0026rsquo;utilisateur administrateur du Raspberry. Si vous avez suivi l\u0026rsquo;installation que je recommande vous avez un utilisateur nommé bitcoin qui a pour rôle d\u0026rsquo;administrer les services bitcoind et lnd. C\u0026rsquo;est sur ce dernier que vous vous connecterez via SSH et non sur l\u0026rsquo;utilisateur root.\nMaxAuthTries 3 : Nombre d\u0026rsquo;essais pour se connecter via SSH limité à 3. Cela bloque les attaques par brute force automatisé.\nMaxSessions 1 : Si vous êtes la seule personne à gérer votre machine, et que vous ne comptez pas créer plusieurs connexions SSH simultanées, alors limitez le nombre de sessions à 1. Il faut garder ce nombre le plus petit possible en fonction de vos besoins.\nPubkeyAuthentication yes : Cette option vous servira plus tard. Elle n\u0026rsquo;ajoute pas de sécurité supplémentaire, c\u0026rsquo;est une option qui vous facilitera l\u0026rsquo;accès à votre machine.\nTapez CTRL + O et CTRL + X; et enfin redémarrez SSHd afin d\u0026rsquo;appliquer ces modifications en tapant sudo service sshd restart.\nEnregistrer votre clé pour les connexions futures Dans la configuration précédente vous aviez activé l\u0026rsquo;option PubkeyAuthentication, cette option va vous permettre d\u0026rsquo;enregistrer la clé publique de votre machine sur le Raspberry. Cela vous évitera de taper sans cesse le mot de passe de connexion.\nCela se passe en un commande. Suivez le terminal ci-dessous. Notez que cela doit se faire depuis votre machine locale (votre mac, votre pc, etc). Si vous êtes sur Windows vous n\u0026rsquo;aurez pas cette commande.\nmonpc@oumonmac:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub bitcoin@192.168.1.42 Ensuite vous devrez taper le mot de passe de l\u0026rsquo;utilisateur \u0026ldquo;bitcoin\u0026rdquo;. Notez que l\u0026rsquo;IP 192.168.1.42 (comment trouver l\u0026rsquo;IP de mon nœud ?) doit être l\u0026rsquo;IP de votre nœud distant. Cette action aura pour effet de recenser la clé publique de votre machine dans le Raspberry Pi, il vous reconnaîtra pour les connexions futures et ne vous demandera plus de mot de passe.\n Si vous êtes sur Windows en utilisant PuTTy, vous pouvez générer et trouver votre clé publique avec PuTTyGen. Copiez cette clé qui commence par \u0026ldquo;ssh-rsa\u0026rdquo; si vous l\u0026rsquo;avez créé avec le chiffrement RSA. Cliquez sur \u0026ldquo;Save private key\u0026rdquo; et enregistrez le fichier sur votre machine. Revenez sur PuTTy, sur le panneau de gauche trouvez \u0026ldquo;Connection / SSH / Auth\u0026rdquo; puis dans la section \u0026ldquo;Private key file for authentication\u0026rdquo; chargez le fichier de votre clé privée, c\u0026rsquo;est un fichier .ppk. Connectez vous à votre Raspberry en utilisant PuTTy. Une fois connecté tapez sudo nano .ssh/authorized_keys et collez la clé publique que vous aviez copié, puis sauvegardez le fichier. C\u0026rsquo;est terminé désormais votre Raspberry connaît votre clé publique et autorisera les connexions futures depuis votre machine Windows.\n Ajouter une couche supplémentaire à l\u0026rsquo;authentification SSH Pour l\u0026rsquo;instant il est toujours possible de forcer l\u0026rsquo;accès à votre nœud avec une attaque par dictionnaire, qui consiste à tester des millions de mot de passe jusqu\u0026rsquo;à trouver un accès. Il existe un service nommé fail2ban qui va permettre de protéger en limitant les tentatives de connexion.\nPour l\u0026rsquo;installer tapez apt-get update \u0026amp;\u0026amp; apt-get install -y fail2ban. Ensuite vous allez devoir configurer une chose si vous avez modifié le port SSH comme je l\u0026rsquo;ai montré juste au dessus. Cherchez le fichier de configuration de fail2ban nano /etc/fail2ban/jail.d/defaults-debian.conf. Voyez la section [sshd] mettez ce qui suit (si vous n\u0026rsquo;avez rien dans le fichier, ajoutez également ce qui suit) :\n[sshd] enabled = true port = 2310 # Notez que c\u0026#39;est le port que j\u0026#39;ai mis plus haut dans sshd_config Sauvegardez en tapant CTRL + O et CTRL + X pour fermer et enfin tapez systemctl restart fail2ban.\n fail2ban est un service polyvalent qui sécurise nombreuse authentifications, dont le service sshd et nous l\u0026rsquo;utilisons pour ça.\n Activer le redémarrage automatique des services Cette partie est cruciale. Si votre Raspberry est redémarré à cause d\u0026rsquo;une coupure de courant par exemple, il redémarrera\u0026hellip; Mais il ne relancera pas bitcoind ni lnd. Ce qui aurait pour effet d\u0026rsquo;éteindre le service et vous obliger à intervenir pour qu\u0026rsquo;il persévère.\nD\u0026rsquo;abord il va falloir faire en sorte que le disque soit toujours monté sur le dossier .bitcoin car c\u0026rsquo;est ce dernier qui recense la blockchain et bitcoind en a besoin. Le montage de disque ne se fait jamais automatiquement. Alors voilà comment configurer cela :\n1 2 3 4 5 6 7 8 9 10 11 12 13  pi@raspberry:~ $ df -h Filesystem Size Used Avail Use% Mounted on /dev/root 15G 5.6G 8.4G 40% / devtmpfs 460M 0 460M 0% /dev tmpfs 464M 0 464M 0% /dev/shm tmpfs 464M 12M 452M 3% /run tmpfs 5.0M 4.0K 5.0M 1% /run/lock tmpfs 464M 0 464M 0% /sys/fs/cgroup /dev/mmcblk0p1 44M 22M 22M 51% /boot /dev/sda 458G 253G 182G 59% /home/bitcoin/.bitcoin tmpfs 93M 0 93M 0% /run/user/1001 pi@raspberry:~ $ echo \u0026#39;/dev/sda /home/bitcoin/.bitcoin ext4 defaults,noatime 0 0\u0026#39; \u0026gt;\u0026gt; /etc/fstab   Soyez vigilant ici. J\u0026rsquo;ai surligné mon montage actuel qui est /dev/sda monté sur /home/bitcoin/.bitcoin, vous devez mettre ce chemin dans le echo en dessous. Notez également l\u0026rsquo;annotation ext4 qui est le système de fichier que j\u0026rsquo;ai choisi lorsque j\u0026rsquo;avais formaté le disque. Si vous avez un doute suivez le terminal ci-dessous\n1 2  pi@raspberry:~ $ file -sL /dev/sda /dev/sda: Linux rev 1.0 ext4 filesystem data, UUID=a2a0ec66-f768-4cf0-9442-6c2878ab60e1, volume name BLOCK-STORAGE (needs journal recovery) (extents) (64bit) (large files) (huge files)   Où /dev/sda est mon disque à monter. On voit en surligné ext4 qui est le système de fichier.\nbitcoind Le redémarrage automatique d\u0026rsquo;un service sur Linux se fait toujours de la même manière, il faut écrire le service. Et pour ce faire tapez nano /etc/systemd/system/bitcoind.service et entrez la configuration suivante :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  [Unit] Description=Bitcoin daemon After=network.target [Service] ExecStartPre=/bin/sh -c \u0026#39;sleep 30\u0026#39; ExecStart=/usr/local/bin/bitcoind -daemon -conf=/home/bitcoin/.bitcoin/bitcoin.conf -pid=/home/bitcoin/.bitcoin/bitcoind.pid # Mettez le chemin vers votre dossier .bitcoin PIDFile=/home/bitcoin/.bitcoin/bitcoind.pid # Mettez le chemin vers votre dossier .bitcoin User=bitcoin # Votre utilisateur qui gère le service Group=bitcoin # Votre groupe qui gère le service Type=forking KillMode=process Restart=always TimeoutSec=120 RestartSec=30 [Install] WantedBy=multi-user.target   CTRL + O et CTRL + X pour enregistrer et quitter puis tapez systemctl enable bitcoind. La machine est lancée, le service bitcoind démarrera au lancement du Raspberry.\nlnd Encore une fois, il faut créer un service pour le service de lightning network, tapez nano /etc/systemd/system/lnd.service et voilà la configuration que je recommande :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  [Unit] Description=LND Wants=bitcoind.service After=bticoind.service # Il démarre après bitcoind [Service] ExecStart=/usr/local/bin/lnd User=bitcoin # Votre utilisateur qui gère le service Group=bitcoin # Votre utilisateur qui gère le service Type=simple KillMode=process LimitNOFILE=128000 TimeoutSec=300 Restart=always RestartSec=120 [Install] WantedBy=multi-user.target   Et enfin pour l\u0026rsquo;activer systemctl enable lnd.\nFélicitations, votre Raspberry est autonome, il relancera les services en cas de redémarrage inopiné, sans votre aide, tout seul comme un grand.\nDans un article futur on va voir comment on peut administrer son nœud avec une interface graphique !\n","description":"Dans l'article précédent j'ai écrit au sujet de l'installation d'un nœud Bitcoin Lightning Network avec un Raspberry Pi. Ce dernier est sommaire et va à l'essentiel. Dans cet article il va s'agir d'optimiser la configuration du Raspberry Pi afin d'améliorer sa sécurité et rendre l'administration moins laborieuse.","id":12,"section":"blog","tags":["bitcoin","lightning network","debian","bitcoin-cli"],"title":"Configurer son nœud Bitcoin Lightning Network","uri":"https://blocs.fr/blog/configurer-un-noeud-lightning-network/"}]